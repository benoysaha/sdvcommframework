#ifndef MY_SAMPLE_RPC_IMPL_H
#define MY_SAMPLE_RPC_IMPL_H

#include "sample_rpc_service.pb.h" // Generated by protoc

namespace comms_stack {

// This class implements the service interface generated by protoc:
// class protos::SampleRpc {
//  public:
//   virtual ~SampleRpc();
//   // Service methods like:
//   virtual void Echo(::google::protobuf::RpcController* controller,
//                     const ::comms_stack::protos::EchoRequest* request,
//                     ::comms_stack::protos::EchoResponse* response,
//                     ::google::protobuf::Closure* done);
//   virtual void Add(::google::protobuf::RpcController* controller,
//                    const ::comms_stack::protos::AddRequest* request,
//                    ::comms_stack::protos::AddResponse* response,
//                    ::google::protobuf::Closure* done);
// };
// Note: The generated interface might vary slightly based on protoc version and options.
// For non-gRPC services, it's often a simpler synchronous-style interface or one using
// abstract RpcController and Closure. We will adapt to what protoc with cc_generic_services=true gives.
// For simplicity, we'll assume a direct call style for the implementation,
// and the CommunicationManager's handler will manage the Closure.

class MySampleRpcImpl : public protos::SampleRpc {
public:
    MySampleRpcImpl();
    ~MySampleRpcImpl() override;

    // Implement the service methods
    // The 'done->Run()' part is crucial if the generated service uses closures.
    // If it's a simpler generated interface, these might directly return void or a status.
    void Echo(::google::protobuf::RpcController* controller,
              const protos::EchoRequest* request,
              protos::EchoResponse* response,
              ::google::protobuf::Closure* done) override;

    void Add(::google::protobuf::RpcController* controller,
             const protos::AddRequest* request,
             protos::AddResponse* response,
             ::google::protobuf::Closure* done) override;

    // Our own RpcService base class method, if we were to use it.
    // For now, we directly use the generated protos::SampleRpc.
    // std::string getServiceName() const override { return "SampleRpc"; }
};

} // namespace comms_stack

#endif // MY_SAMPLE_RPC_IMPL_H
