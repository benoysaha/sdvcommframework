#ifndef RPC_SERVICE_H
#define RPC_SERVICE_H

#include <string>

namespace comms_stack {

// This is a conceptual base class.
// The actual service interface will be generated by protoc from the .proto file's service definition.
// For example, protoc would generate a "SampleRpc" class with virtual methods like:
// virtual void Echo(google::protobuf::RpcController* controller,
//                   const protos::EchoRequest* request,
//                   protos::EchoResponse* response,
//                   google::protobuf::Closure* done);
// virtual void Add(google::protobuf::RpcController* controller,
//                  const protos::AddRequest* request,
//                  protos::AddResponse* response,
//                  google::protobuf::Closure* done);
//
// Application developers would then implement this generated interface.
class RpcService {
public:
    virtual ~RpcService() = default;
    // This method would be used by CommunicationManager to know the service name
    // for configuration lookup (mapping to SOME/IP Service ID).
    // Alternatively, the service name is passed during registration.
    virtual std::string getServiceName() const = 0;

protected:
    RpcService() = default;
};

} // namespace comms_stack

#endif // RPC_SERVICE_H
